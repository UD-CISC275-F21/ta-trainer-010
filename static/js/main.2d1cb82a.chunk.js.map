{"version":3,"sources":["components/Prompt.tsx","components/SwapButton.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Prompt","text","SwapButton","props","useState","active","setActive","onClick","change","App","prompt","setPrompt","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAEaA,EAAS,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,KACtB,OAAO,8BAAMA,KCDFC,EAAa,SAACC,GACzB,MAA4BC,oBAAkB,GAA9C,mBAAOC,EAAP,KAAeC,EAAf,KAWA,OAAO,wBAAQC,QAAS,kBARlBF,EACFF,EAAMK,OAAO,gBAEbL,EAAMK,OAAO,sBAEfF,GAAWD,IAGN,mBCQMI,MAjBf,WACE,MAA4BL,mBAAiB,qBAA7C,mBAAOM,EAAP,KAAeC,EAAf,KAMA,OACE,qBAAKC,UAAU,MAAf,SACE,gCACE,cAAC,EAAD,CAAQX,KAAMS,IACd,cAAC,EAAD,CAAYF,OAAQG,UCFbE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2d1cb82a.chunk.js","sourcesContent":["\r\n\r\nexport const Prompt = ({text}: {text: string}): JSX.Element => {\r\n  return <div>{text}</div>\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport const SwapButton = (props: {change: (text: string) => void}): JSX.Element => {\r\n  const [active, setActive] = useState<boolean>(true);\r\n\r\n  const swapper = () => {\r\n    if (active) {\r\n      props.change(\"Old prompt!!\");\r\n    } else {\r\n      props.change(\"New Prompt!!!\");\r\n    }\r\n    setActive(!active)\r\n  }\r\n\r\n  return <button onClick={() => swapper()}>Swap</button>\r\n}","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Prompt } from './components/Prompt';\nimport { SwapButton } from './components/SwapButton';\n\nfunction App(): JSX.Element {\n  const [prompt, setPrompt] = useState<string>(\"Hello and welcome\");\n\n  /*useEffect(() => {\n    setPrompt(\"Hello and welcome Actual\")\n  })*/\n\n  return (\n    <div className=\"App\">\n      <div>\n        <Prompt text={prompt}></Prompt>\n        <SwapButton change={setPrompt}></SwapButton>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}